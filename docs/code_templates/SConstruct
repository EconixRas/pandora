# this is a standard scons that can be copied and used to compile your models
nameProgram = '#PROGRAM_NAME'

agents = ['#AGENT_CLASSNAME']
world = '#WORLD_CLASSNAME'
namespaceAgents = ['#NAMESPACE_FOR_EACH_AGENT']

srcFiles = Split('main.cxx #ALL_FILES.CXX')

import os, sys
from subprocess import call

pandoraPath = os.getenv('PANDORAPATH', '/usr/local/pandora')
sys.path.append(pandoraPath+'/bin')

import generateMpi 

release = ARGUMENTS.get('release', 1)
extremeDebug = ARGUMENTS.get('edebug', 0)
	
env = Environment(ENV=os.environ, CXX='mpicxx')

generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml pthread')
if int(release) == 0:
	env['CCFLAGS'] = '-std=c++0x -g -O0 -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG'.split()
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libs += ['pandorad']
else:
	env['CCFLAGS'] = '''-std=c++0x -O3 -DTIXML_USE_STL -fopenmp'''.split()
	libs += ['pandora']

includeDirs = """. pandoraPath""".split()

includeDirs += ['/usr/local/include','/usr/local/hdf5/include','/usr/include/gdal/', pandoraPath+'/include']
libDirs = Split('../../ /usr/local/lib /usr/local/hdf5/lib/ '+pandoraPath+'/lib')
libs += ['mpl']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")

env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)
env.Program(nameProgram, srcFiles+mpiAgentsSrc, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

