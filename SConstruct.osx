
import os

release = ARGUMENTS.get('release', 1)
extremeDebug = ARGUMENTS.get('edebug', 0)

env = Environment(ENV=os.environ, CXX='mpicxx')

env.VariantDir('build', '.')
env['LINKFLAGS'] = '-undefined warning'

libs = Split('pthread gdal hdf5 z tinyxml boost_filesystem boost_system boost_timer boost_chrono gomp mpl dl')

if int(release) == 0:
	env['CCFLAGS'] = Split('-cxx=g++-4.8 -std=c++0x -g -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libraryName = 'pandorad.so'
	pythonLibraryName = 'pyPandorad.so'
else:
	env['CCFLAGS'] = Split('-cxx=g++-4.8 -Ofast -DTIXML_USE_STL -fopenmp -std=c++0x ')
	libraryName = 'pandora.so'
	pythonLibraryName = 'pyPandora.so'

coreFiles = [str(f) for f in Glob('*.cxx') if str(f) != 'MpiStubCode.cxx']
analysisFiles = [str(f) for f in Glob('analysis/*.cxx')]
srcFiles = coreFiles + analysisFiles

srcBaseFiles = ['build/' + src for src in srcFiles]
includeDirs = ['.', 'analysis/', '/usr/local/include', '/usr/include/gdal/']
libDirs = ['.', '/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/lib/','/usr/local/lib']

env.SharedLibrary(libraryName, srcBaseFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs)


envPython = Environment(ENV=os.environ, CXX='mpicxx')
envPython['LIBPATH'] = libDirs
envPython.VariantDir('build_py', '.')

if int(release) == 0:
	envPython['CCFLAGS'] = Split('-cxx=g++-4.8 -g -Wall  -std=c++0x -DTIXML_USE_STL -DPANDORADEBUG')	
	if int(extremeDebug)==1:
		envPython['CCFLAGS'] += ['-DPANDORAEDEBUG']
else:
	envPython['CCFLAGS'] = Split('-cxx=g++-4.8 -Ofast -DTIXML_USE_STL -std=c++0x')

srcPyFiles = ['build_py/' + src for src in srcFiles]
srcPyFiles.append('build_py/pyPandora/pyBindings.cxx')
srcPyFiles.append('build_py/MpiStubCode.cxx')

libsPython = libs
includeDirsPython = ['']

conf = Configure(envPython)
libsPython += ['boost_python']
libsPython += ['python3.4m']
includeDirsPython = ['/usr/local/Cellar/python3/3.4.1/Frameworks/Python.framework/Versions/3.4/include/python3.4m/']

includeDirsPython += includeDirs
envPython = conf.Finish()
envPython.SharedLibrary(pythonLibraryName, srcPyFiles, CPPPATH=includeDirsPython, LIBS=libsPython)

