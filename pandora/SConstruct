
import os

release = ARGUMENTS.get('release', 1)
extremeDebug = ARGUMENTS.get('edebug', 0)

env = Environment(ENV=os.environ, CXX='mpicxx')

env.VariantDir('build', '.')

libs = Split('pthread gdal hdf5 z tinyxml grass_gis boost_filesystem boost_system boost_timer boost_chrono gomp')

if int(release) == 0:
	env['CCFLAGS'] = Split('-std=c++0x -g -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libraryName = 'pandorad'
	pythonLibraryName = 'pyPandorad'
else:
	env['CCFLAGS'] = Split('-Ofast -DTIXML_USE_STL -fopenmp -std=c++0x ')
	libraryName = 'pandora'
	pythonLibraryName = 'pyPandora'

coreFiles = Split('World.cxx StaticRaster.cxx DynamicRaster.cxx Agent.cxx Statistics.cxx SimulationRecord.cxx AgentRecord.cxx Serializer.cxx SequentialSerializer.cxx Simulation.cxx Config.cxx MpiFactory.cxx IncrementalRaster.cxx RasterLoader.cxx Action.cxx LoggerBase.cxx GeneralState.cxx ShpLoader.cxx SpacePartition.cxx OpenMPSingleNode.cxx')

analysisFiles = Split('analysis/Analysis.cxx analysis/AgentMean.cxx analysis/AgentSum.cxx analysis/AgentNum.cxx analysis/Output.cxx analysis/AgentStdDev.cxx analysis/GlobalAgentStats.cxx analysis/IndividualStats.cxx analysis/AgentHistogram.cxx analysis/AgentHDFtoSHP.cxx analysis/GlobalRasterStats.cxx analysis/RasterMean.cxx analysis/RasterSum.cxx')

srcFiles = coreFiles + analysisFiles

srcBaseFiles = [] 
for src in srcFiles:
	srcBaseFiles.append('build/'+src)

includeDirs = Split('. analysis/ /usr/local/include /usr/local/hdf5/include /usr/lib/grass64/include/ /usr/include/gdal/')
libDirs = Split('. /usr/local/lib /usr/local/hdf5/lib/ /usr/lib/grass64/lib/')
libs += ['mpl']
libs += ['dl']

env.SharedLibrary(libraryName, srcBaseFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs)

envPython = Environment(ENV=os.environ, CXX='mpicxx')

envPython['LINKFLAGS'] = Split('-Wl,--export-dynamic,-no-undefined')
envPython['LIBPATH'] = libDirs
envPython['LIBPATH'] += ['/usr/lib/python3.3/config-3.3m-x86_64-linux-gnu/']

Split('-Wl,--export-dynamic,-no-undefined')
envPython.VariantDir('build_py', '.')

if int(release) == 0:
	envPython['CCFLAGS'] = Split('-g -Wall -DTIXML_USE_STL -DPANDORADEBUG')	
	if int(extremeDebug)==1:
		envPython['CCFLAGS'] += ['-DPANDORAEDEBUG']
else:
	envPython['CCFLAGS'] = Split('-Ofast -DTIXML_USE_STL')
	
srcPyFiles = [] 
for src in srcFiles:
	srcPyFiles.append('build_py/'+src)

srcPyFiles.append('build_py/pyPandora/pyBindings.cxx')

srcPyFiles.append('build_py/MpiStubCode.cxx')

libsPython = libs
includeDirsPython = ['']

conf = Configure(envPython)
if conf.CheckLib('python3.3'):
	libsPython += ['boost_python-py33']
	libsPython += ['python3.3m']
	includeDirsPython = ['/usr/include/python3.3/']
elif conf.CheckLib('python3.2mu'):
	libsPython += ['boost_python-py32']
	libsPython += ['python3.2mu']	
	includeDirsPython = ['/usr/include/python3.2/']
else:
	# default, python 2.7
	libsPython += ['boost_python-py27']
	libsPython += ['python2.7']
	includeDirsPython = ['/usr/include/python2.7/']

includeDirsPython += includeDirs
envPython = conf.Finish()
envPython.SharedLibrary(pythonLibraryName, srcPyFiles, CPPPATH=includeDirsPython, LIBS=libsPython)

