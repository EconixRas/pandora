nameProgram = 'battle'

agents = ['Soldier','Bullet']
namespaceAgents = ['BattleSim','BattleSim']
world = 'Battlefield'

srcFiles = Split('main.cxx Soldier.cxx Bullet.cxx Battlefield.cxx BattlefieldConfig.cxx')

import os, sys
from subprocess import call

sys.path.append('../../../scripts/')
import generateMpi 

release = ARGUMENTS.get('release', 1)
extremeDebug = ARGUMENTS.get('edebug', 0)
useMpi = ARGUMENTS.get('mpi', 1)

if int(useMpi) == 1:
	env = Environment(ENV=os.environ, CXX='mpicxx')
else:
	env = Environment(ENV=os.environ, CXX='g++')
	
generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml pthread grass_gis grass_datetime')
if int(release) == 0:
	env['CCFLAGS'] = Split('-g -O0 -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libs += ['pandorad']
else:
	env['CCFLAGS'] = Split('-O3 -DTIXML_USE_STL -fopenmp')
	libs += ['pandora']

if int(useMpi)==1:
	env['CCFLAGS'] += ['-DPANDORAMPI']

includeDirs = Split('./ ../../../')

includeDirs += ['/usr/lib/grass64/include/','/usr/include/gdal/']
libDirs = ['../../../', '/usr/lib/grass64/lib/']
if int(useMpi)==1:
	includeDirs += ['/usr/local/hdf5/include']
	libDirs += ['usr/local/hdf5/lib/']
libs += ['mpl']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")
env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)
env.Program(nameProgram, mpiAgentsSrc+srcFiles, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

