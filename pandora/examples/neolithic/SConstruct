nameProgram = 'neolithicDispersion'

agents = ['']
world = 'NeolithicWorld'
namespaceAgents = ['']

srcFiles = Split('main.cxx NeolithicWorld.cxx NeolithicConfig.cxx')

import os, sys
from subprocess import call

sys.path.append('../../scripts/')
import generateMpi 

release = ARGUMENTS.get('release', 1)
extremeDebug = ARGUMENTS.get('edebug', 0)
	
env = Environment(ENV=os.environ, CXX='mpicxx')

generateMPICodeBuilder = Builder(action=generateMpi.execute)
env.Append( BUILDERS = {'GenerateMPICode' : generateMPICodeBuilder})

linkFlags = Split('-fopenmp')
libs = Split('tinyxml pthread grass_gis grass_datetime')
if int(release) == 0:
	env['CCFLAGS'] = Split('-std=c++0x -g -O0 -Wall -DTIXML_USE_STL -fopenmp -DPANDORADEBUG')
	if int(extremeDebug)==1:
		env['CCFLAGS'] += ['-DPANDORAEDEBUG']
	libs += ['pandorad']
else:
	env['CCFLAGS'] = Split('-std=c++0x -O3 -DTIXML_USE_STL -fopenmp')
	libs += ['pandora']

includeDirs = Split('./ ../../')

includeDirs += ['/usr/local/include','/usr/local/hdf5/include','/usr/lib/grass64/include/','/usr/include/gdal/']
libDirs = Split('../../ /usr/local/lib /usr/local/hdf5/lib/ /usr/lib/grass64/lib/')
libs += ['mpl']

# add the list of mpi code that must be generated & compiled
mpiAgentsSrc = ['mpiCode/FactoryCode.cxx']
agentsSrc = ['main.cxx']
for agent in agents:	
	if agent != '':
		agentsSrc.append(agent+".cxx")
		mpiAgentsSrc.append("mpiCode/"+agent+"_mpi.cxx")

env['namespaces'] = namespaceAgents
env.GenerateMPICode( target=mpiAgentsSrc, source=agentsSrc)
env.Depends(world+'.hxx',mpiAgentsSrc)
env.Program(nameProgram, srcFiles+mpiAgentsSrc, CPPPATH=includeDirs, LIBS=libs, LIBPATH=libDirs, LINKFLAGS=linkFlags)

